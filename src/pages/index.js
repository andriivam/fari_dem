import Head from 'next/head';
import React from 'react';
import Header from '../../components/header/header';
import Footer from '../../components/footer/footer';
import styles from '@/styles/Home.module.css';
import { useState, useRef, useEffect } from 'react';
import ImageSection from '../../components/imageSection/imageSection';
import Image from 'next/image';
import MyImage from '../../components/image';

export default function Home() {

  const [inputType, setInputType] = useState('text');
  const [outputType, setOutputType] = useState('image');
  const [userInput, setUserInput] = useState('');
  const [stateValue, setStateValue] = useState("");
  const [prediction, setPrediction] = useState(null);
  const [version, setVersion] = useState("db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf");
  const [error, setError] = useState(null);
  const [link, setLink] = useState(null);
  const inputRef = useRef();


  console.log(stateValue, 'stateValue')
  const handleInputType = (e) => {
    setInputType(e.target.value);
  }

  const handleOutputType = (e) => {
    setOutputType(e.target.value);
  }

  const handleUserInput = (e) => {
    const textInput = e.target.value;
    console.log(textInput, 'textInput')
    setUserInput(textInput);
    setStateValue(textInput);
  };

  const handleStateChange = (newValue) => {
    setStateValue(newValue);
    console.log(stateValue, 'stateValue');
  };

  useEffect(() => {
    if (outputType === 'image') {
      setVersion("db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf");
      console.log(version, 'image version')
    } else if (outputType === 'video') {
      setVersion("1e205ea73084bd17a0a3b43396e49ba0d6bc2e754e9283b2df49fad2dcf95755");
      console.log(version, 'video version')
    } else if (outputType === '3D') {
      setVersion("1a4da7adf0bc84cd786c1df41c02db3097d899f5c159f5fd5814a11117bdf02b");
      console.log(version, '3D version')
    }
  }, [outputType])


  useEffect(() => {
    if (inputType === 'image') {
      setVersion("2e1dddc8621f72155f24cf2e0adbde548458d3cab9f00c0139eea840d0ac4746");
      console.log(version, 'image version')
    }

  }, [inputType]);

  useEffect(() => {
    if (inputType === 'image' && outputType === 'image') {
      setVersion("d0742988ca2894860b9f19cb18eeaaa446c6812f700296520fc823330503d861");
    }
    console.log(version, 'text version');
  }, [inputType, outputType]);


  const handleSubmit = async (e) => {
    try {
      e.preventDefault();
      const response = await fetch("/api/predictions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: stateValue,
          image: stateValue,
          version: version,
        }),
      });

      let prediction = await response.json();

      if (response.status !== 201) {
        setError(prediction.detail);
        console.log(error, 'error from frontend')
        return;
      }

      setPrediction(prediction);

      while (prediction.status !== "succeeded" && prediction.status !== "failed") {
        const response = await fetch("/api/predictions/" + prediction.id);
        prediction = await response.json();

        if (response.status !== 200) {
          setError(prediction.detail);
          return;
        }
        setPrediction(prediction);
      }

      const { output } = prediction;
      let link = "";

      if (Array.isArray(output)) {
        link = output[0];
      } else if (typeof output === "string") {
        link = output;
      } else if (typeof output === "object" && output.animation) {
        link = output.animation;
      }

      setLink(link);

    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>FARI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <form className={styles.container} onSubmit={handleSubmit}>
        <div className={styles.col1}>
          <h2 className={styles.inputHeader}>Input</h2>
          <div className={styles.selectDiv}>
            <h4 className={styles.selectHeader}>Choose an option</h4>
            <select className={styles.select} name="inputType" value={inputType} onChange={handleInputType}>
              <option value="text" defaultValue="text" >Text</option>
              <option value="image">Image</option>
              <option value="image + text">Image&Text</option>
            </select>
          </div>
          {inputType === 'image + text' ? (
            <div>
              <ImageSection onStateChange={handleStateChange} />
              <h3 className={styles.imgHeader}>Describe your image</h3>
              <input onChange={handleUserInput} id="text_input" className={styles.input} type="text" placeholder="Write your prompt here" />
            </div>
          ) : null}
          {inputType === 'image' ? <div className={styles.hidden}><ImageSection onStateChange={handleStateChange} /></div> : null}
          <div>
            {inputType === 'text' ? (
              <>
                <h3 className={styles.imgHeader}>Write your prompt here</h3>
                <input value={userInput} ref={inputRef} onChange={handleUserInput} className={styles.input} type="text" placeholder="Write your prompt here" />
              </>
            ) : null}
          </div>
        </div>

        {/* Right side of screen */}

        <div className={styles.col2}>
          <h2 className={styles.outputHeader}>Output</h2>
          <div className={styles.selectDiv}>
            <h3 className={styles.selectHeader}>Choose an option</h3>
            <select className={styles.select} name="outputType" value={outputType} onChange={handleOutputType}>
              <option defaultValue="image" value="image">Image</option>
              <option value="text">Text</option>
              <option value="video">Video</option>
              <option value="3D">3D</option>
            </select>
          </div>
          <div className={styles.resultContainer}>
            <h3 className={styles.resultHeader}>Result</h3>
            {prediction ? (
              <div>
                {outputType !== 'text' && prediction.output && (
                  <div className={styles.prediction}>
                    <MyImage
                      src={link}
                      width={580}
                      height={460}
                      alt="replicate video"
                      autoPlay
                      controls
                      loop
                    />
                  </div>
                )}
                {outputType === 'text' && (
                  <div>
                    <p>{prediction.output}</p>
                  </div>
                )}
                <p>status: {prediction.status}</p>
              </div>
            ) : (
              <div className={styles.resultDiv}>
                <p className={styles.outputText}>Once you have completed settings, click on <q>submit</q> to generate an image</p>
              </div>
            )}
          </div>
        </div>
      </form>
      {error && <div>{error}</div>}
      <Footer handleSubmit={handleSubmit} />
    </>
  )
}
